{
	"info": {
		"_postman_id": "513ba95d-fa57-481b-be7f-86c78a43cc0c",
		"name": "final-aus-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14007778"
	},
	"item": [
		{
			"name": "auth0 token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"grant_type\": \"password\",\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"client_secret\": \"{{client_secret}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{auth0-domain}}/oauth/token",
					"protocol": "https",
					"host": [
						"{{auth0-domain}}"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "app token user1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"jwt1\", pm.response.json()[\"id_token\"])\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/login",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "decode token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/decode",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"decode"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"user_id1\", pm.response.json()[\"owner\"])\r",
							"pm.environment.set(\"boat_id\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat2 with only application/json user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id2\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The London\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(30);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The London\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 30\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat3 user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id3\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Mermaid\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Speedboat\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(45);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Mermaid\",\r\n    \"type\": \"Speedboat\",\r\n    \"length\": 45\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat4 user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id4\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Cappy\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Sailboat\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Cappy\",\r\n    \"type\": \"Sailboat\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat5 user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id5\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"USS Enterprise\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Aircraft Carrier\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(1000);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"USS Enterprise\",\r\n    \"type\": \"Aircraft Carrier\",\r\n    \"length\": 1000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat6 user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_id6\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Shippy\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Barge\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(500);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Shippy\",\r\n    \"type\": \"Barge\",\r\n    \"length\": 500\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat - 406 application/javascript user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat - 406 text/plain user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat  no auth user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat less than 3 attributes user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat wrong datatype - name user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 5,\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat wrong datatype - type user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": 8,\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat wrong datatype - length user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": 8,\r\n    \"length\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat user1 - invalid entry name character length /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat user1 - invalid entry type character length /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat user1 - invalid entry length minimum int /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat user1 - /boats Wrong attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name2\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth0 user2 token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"grant_type\": \"password\",\r\n    \"username\": \"{{username2}}\",\r\n    \"password\": \"{{password2}}\",\r\n    \"client_id\": \"{{client_id}}\",\r\n    \"client_secret\": \"{{client_secret}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{auth0-domain}}/oauth/token",
					"protocol": "https",
					"host": [
						"{{auth0-domain}}"
					],
					"path": [
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "app token  user2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"jwt2\", pm.response.json()[\"id_token\"])\r",
							"\r",
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{username2}}\",\r\n    \"password\": \"{{password2}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/login",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat  user2 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"user_id2\", pm.response.json()[\"owner\"])\r",
							"pm.environment.set(\"boat_id21\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch2\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran2\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(50);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id2\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch2\",\r\n    \"type\": \"Catamaran2\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats user1 - has pagination at 5 per page -/boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of boats in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats user2 - no pagination due to 1 boat added - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of boats in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.equal(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats - no auth - pagination - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of boats in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats due to invalid user auth - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of boats in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boat  invalid auth - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch2\",\r\n    \"type\": \"Catamaran2\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid auth method put boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid auth method patch boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid auth method delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid auth method get boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get invalid boat with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 (or any boat) with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1 - no accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat21 with auth2  2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch2\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran2\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(50);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id2\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id21}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id21}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get invalid boat with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with invalid auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update boat1 with invalid auth Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update some boat1 with invalid auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat1 with invalid auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"The Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(50);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of invalid boat with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of invalid boat with no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth2  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of boat1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of boat1 with auth  1 - wrong attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name2\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of boat1 with auth  1 - wrong length datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name2\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": \"50\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of boat1 with auth  1 - wrong name datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": 2,\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of boat1 with auth  1 - wrong type datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": 2,\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1 - No values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1 - wrong minimum data length name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1 - wrong minimum data length type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"\",\r\n    \"length\": 50\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of boat1 with auth  1 - wrong minimum data minimum length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"The Sea Witch\",\r\n    \"type\": \"The Catamaran\",\r\n    \"length\": 0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "restore all of boat1 with auth  1 (Revert to original)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of boat1 with auth  1 - name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"thee Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"thee Sea Witch\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of boat1 with auth  1 - type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"thee Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"thee Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"thee Catamaran\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of boat1 with auth  1 - length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"thee Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"thee Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(80);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"length\": 80\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of boat1 with auth  1 - name and length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"thee Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(40);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"length\": 40\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of boat1 with auth  1 (restore to original)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update boat1 with auth  1 - invalid name character length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update boat1 with auth  1 - invalid type character length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update boat1 with auth  1 - invalid length value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"length\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update boat1 with auth  1 - no values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update boat1 with auth  1 - invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name2\": \"the sea witch\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of boat1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of boat1 with auth2  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of invalid boat with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of boat1 with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load2 with only application/json user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id2\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Books\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Books\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load3 user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id3\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Food\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(50);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 50,\r\n  \"item\": \"Food\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load4 user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id4\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2022\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Toys\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(30);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 30,\r\n  \"item\": \"Toys\",\r\n  \"creation_date\": \"10/18/2022\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load5 user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id5\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Laptops\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Laptops\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load6 user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id6\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Tea\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"Tea\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load - 406 application/javascript user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load - 406 text/plain user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "text/plain",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load  no auth user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load less than 3 attributes user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load wrong datatype - item user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": 5,\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load wrong datatype - date user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": 6\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load wrong datatype - volume user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": \"5\",\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load user1 - invalid entry item character length /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load user1 - invalid entry date character length /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load user1 - invalid entry volume minimum int /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 0,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load user1 - /loads wrong attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume2\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load  user2 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_id21\", pm.response.json()[\"id\"])\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Megablocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id2\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"Megablocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Load  invalid auth - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"Megablocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads user1 - has pagination at 5 per page -/loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of loads in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads user2 - no pagination due to 1 load added - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of loads in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.equal(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads - no auth - pagination - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of loads in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads due to invalid user auth - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of loads in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.equal(5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid method put /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid method delete /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid method patch /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid auth method get loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"invalid_header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Unable to parse authentication token.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_auth}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get invalid load with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 (or any load) with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth  1 - no accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load21 with auth2  2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Megablocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id2\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id21}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id21}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get invalid load with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth2  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This load does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"9/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"5 LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(10);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 10,\r\n  \"item\": \"5 LEGO Blocks\",\r\n  \"creation_date\": \"9/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of invalid load with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of invalid load with no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth2  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This load does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of load1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 8,\r\n  \"item\": \"20 LEGO Blocks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of load1 with auth  1 - wrong attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume2\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of load1 with auth  1 - wrong volume datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": \"5\",\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of load1 with auth  1 - wrong date datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": 20\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put update some of load1 with auth  1 - wrong item datatype",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": 30,\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1 - No values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1 - wrong minimum data length item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1 - wrong minimum data date type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update all of load1 with auth  1 - wrong minimum volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 0,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "restore all of load1 with auth  1 (Revert to original)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of load1 with auth  1 - item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"20 LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"item\": \"20 LEGO Blocks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of load1 with auth  1 - date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"3/5/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"20 LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creation_date\": \"3/5/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of load1 with auth  1 - volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"3/5/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"20 LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(50);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update some of load1 with auth  1 - item and volume",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"3/5/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of load1 with auth  1 (restore to original)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update load1 with auth  1 - invalid item character length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"item\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update load1 with auth  1 - invalid date character length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creation_date\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update load1 with auth  1 - invalid volume value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update load1 with auth  1 - no values",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update load1 with auth  1 - invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"item2\": \"LEGO Blocks\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of load1 with auth  1 - wrong accept header",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(406);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Client must accept valid JSON\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/javascript",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of load1 with auth2  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This load does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of invalid load with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch update all of load1 with no auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load01 to boat01 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat02 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}/loads/{{load_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}",
						"loads",
						"{{load_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load04 to boat01 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat01 with auth - expect 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The load is already loaded on another boat\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat01 with auth2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat01 with no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign invalid load to boat01 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id is loaded with the load with this load_id\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1 - sample to view all loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth  1 - sample with carrier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"carrier\"][\"id\"]).to.eq(pm.environment.get(\"boat_id\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load01 to boat01 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1 - verify removed load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load1 with auth  1 - verify removed carrier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load04 to boat01 with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat1 with auth  1 - verify no more loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load4 with auth  1 - verify removed carrier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2022\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"Toys\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(30);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"   pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boatload user1 - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_load\", pm.response.json()[\"id\"])\r",
							"// This is just a boat\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Loadboat user1 - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"load_boat\", pm.response.json()[\"id\"])\r",
							"// This is just a load\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");\r",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");\r",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"volume\": 5,\r\n  \"item\": \"LEGO Blocks\",\r\n  \"creation_date\": \"10/18/2021\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign loadboat to boatload with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}",
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view boatload with loadboat with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(1);",
							"   pm.expect(pm.response.json()[\"loads\"][0][\"id\"]).to.eq(pm.environment.get(\"load_boat\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view loadboat on boatload with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"carrier\"][\"id\"]).to.eq(pm.environment.get(\"boat_load\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boatload with auth  2 (invalid)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boatload with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view loadboat on boatload with auth - no boatload as carrier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"carrier\"]).to.eq(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Boatload user1 - /boats again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"boat_load\", pm.response.json()[\"id\"])\r",
							"// This is just a boat\r",
							"\r",
							"pm.test(\"201 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");\r",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");\r",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);\r",
							"   //Check if the self url is correct\r",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];\r",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);\r",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sea Witch\",\r\n    \"type\": \"Catamaran\",\r\n    \"length\": 28\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalid assign loadboat to boatload with auth again but with auth2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}",
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign loadboat to boatload with auth again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}",
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign loadboat to boatload with auth again - duplicate check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The load is already loaded on another boat\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}",
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view boatload with loadboat with auth again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(1);",
							"   pm.expect(pm.response.json()[\"loads\"][0][\"id\"]).to.eq(pm.environment.get(\"load_boat\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view loadboat on boatload with auth again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"creation_date\"]).to.eq(\"10/18/2021\");",
							"   pm.expect(pm.response.json()[\"item\"]).to.eq(\"LEGO Blocks\");",
							"   pm.expect(pm.response.json()[\"volume\"]).to.eq(5);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/loads/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"carrier\"][\"id\"]).to.eq(pm.environment.get(\"boat_load\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete loadboat with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_boat}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_boat}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "view boatload with loadboat with auth - no loadboat anymore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    //Check for appropriate 204 status code",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sea Witch\");",
							"   pm.expect(pm.response.json()[\"type\"]).to.eq(\"Catamaran\");",
							"   pm.expect(pm.response.json()[\"length\"]).to.eq(28);",
							"   //Check if the self url is correct",
							"   const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"   pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"   pm.expect(pm.response.json()[\"owner\"]).to.eq(pm.environment.get(\"user_id1\"));",
							"   pm.expect(pm.response.json()[\"loads\"].length).to.eq(0);",
							"   pm.expect(pm.response.json()[\"loads\"]).to.deep.equal([]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boatload with auth  1 again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_load}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_load}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat1 no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat with invalid boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat1 with auth 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This boat does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat2 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat3 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat4 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat5 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat6 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat21 with auth2  2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id21}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id21}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats - no auth - view empty db - /boats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of boats in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"boats\"].length).to.equal(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load1 no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"code\"]).to.eq(\"no auth header\");\r",
							"   pm.expect(pm.response.json()[\"description\"]).to.eq(\"Authorization header is missing\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load with invalid load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No load with this load_id exists\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/1",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load1 with auth2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"content is valid\", function () {\r",
							"   //Check if the response content is valid and matches the expected values\r",
							"   pm.expect(pm.response.json()[\"Error\"]).to.eq(\"This load does not belong to you\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load1 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load2 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load3 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load4 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load5 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load6 with auth  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete load21 with auth2  2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"204 status code\", function () {\r",
							"    //Check for status code\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id21}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id21}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads - no auth - view empty db - /loads",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 status code\", function () {\r",
							"   //Check for appropriate 200 status code\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"only correct number of loads in response\", function () {\r",
							"    //Check for correct number of loads\r",
							"    pm.expect(pm.response.json()[\"loads\"].length).to.equal(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		}
	]
}